version: '2'
services:

  reverse-proxy:
    restart: always
    image: 'traefik:v2.9'
    container_name: 'reverse-proxy'
    command:
      - '--api.insecure=true'
      - '--entrypoints.web.address=:80'
      - '--entrypoints.web.http.redirections.entryPoint.to=websecure'
      - '--entrypoints.web.http.redirections.entryPoint.scheme=https'
      - '--entrypoints.web.http.redirections.entrypoint.permanent=true'
      - '--providers.docker=true'
      - '--providers.docker.exposedbydefault=false'
      - '--entrypoints.websecure.address=:443'
      - '--entryPoints.websecure.forwardedHeaders.insecure=true'
      - '--entryPoints.websecure.proxyProtocol.insecure=true'
      - '--certificatesresolvers.myresolver.acme.tlschallenge=true'
      - '--certificatesresolvers.myresolver.acme.email=info@elmis-dev.org'
      - '--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json'
    ports:
      - '80:80'
      - '443:443'
    networks:
      - 'default'
    volumes:
      - '/var/lib/docker/volumes/letsencrypt:/letsencrypt'
      - '/var/run/docker.sock:/var/run/docker.sock:ro'

  consul:
    command: -server -bootstrap
    image: gliderlabs/consul-server
    ports:
      - "8300"
      - "8400"
      - "8500:8500"
      - "53"

  nginx:
    image: openlmis/nginx:${OL_NGINX_VERSION}
    env_file: settings.env
    environment:
      NGINX_LOG_DIR: '/var/log/nginx/log'
    volumes:
      - 'nginx-log:/var/log/nginx/log'
      - 'consul-template-log:/var/log/consul-template'
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.nginx.rule=Host(`elmis.apps.moh.gm`)'
      - 'traefik.http.routers.nginx.entrypoints=websecure'
      - 'traefik.http.routers.nginx.tls.certresolver=myresolver'
    depends_on: [consul]
    networks:
      - 'default'

  reference-ui:
    restart: always
    image: openlmisgm/gambia-ui:1.0.0
    env_file: settings.env
    depends_on: [consul]

  requisition:
    restart: always
    image: openlmis/requisition:${OL_REQUISITION_VERSION}
    env_file: settings.env
    environment:
      JAVA_OPTS: '-server -Xmx2048m -Dspring.datasource.hikari.maximum-pool-size=5 -Dlogging.config=/config/log/logback.xml'
      spring_profiles_active: ${spring_profiles_active}
    volumes:
      - 'service-config:/config'
    depends_on: [log]
    command: ["/wait-for-postgres.sh", "/run.sh"]

  referencedata:
    restart: always
    image: openlmis/referencedata:${OL_REFERENCEDATA_VERSION}
    env_file: settings.env
    environment:
      JAVA_OPTS: '-server -Xmx2048m -Dspring.datasource.hikari.maximum-pool-size=5 -Dlogging.config=/config/log/logback.xml'
      spring_profiles_active: ${spring_profiles_active}
    volumes:
      - 'service-config:/config'
    depends_on: [log]
    command: ["/wait-for-postgres.sh", "/run.sh"]

  auth:
    restart: always
    image: openlmis/auth:${OL_AUTH_VERSION}
    env_file: settings.env
    environment:
      JAVA_OPTS: '-server -Xmx512m -Dspring.datasource.hikari.maximum-pool-size=5 -Dlogging.config=/config/log/logback.xml -Dflyway.locations=classpath:db/migration,filesystem:/demo-data'
      spring_profiles_active: ${spring_profiles_active}
    volumes:
      - 'service-config:/config'
      - 'auth-tomcat-log:/var/log/auth-tomcat'
    depends_on: [log]
    command: ["/wait-for-postgres.sh", "/run.sh"]

  notification:
    restart: always
    image: openlmis/notification:${OL_NOTIFICATION_VERSION}
    env_file: settings.env
    environment:
      JAVA_OPTS: '-server -Dspring.datasource.hikari.maximum-pool-size=5 -Xmx512m -Dlogging.config=/config/log/logback.xml'
      spring_profiles_active: ${spring_profiles_active}
    volumes:
      - 'service-config:/config'
    depends_on: [log]
    command: ["/wait-for-postgres.sh", "/run.sh"]

  fulfillment:
    restart: always
    image: openlmis/fulfillment:${OL_FULFILLMENT_VERSION}
    env_file: settings.env
    environment:
      JAVA_OPTS: '-server -Xmx512m -Dspring.datasource.hikari.maximum-pool-size=5 -Dlogging.config=/config/log/logback.xml -Dflyway.locations=classpath:db/migration,filesystem:/demo-data'
      spring_profiles_active: ${spring_profiles_active}
    volumes:
      - 'service-config:/config'
    depends_on: [log]
    command: ["/wait-for-postgres.sh", "/run.sh"]


  cce:
    restart: always
    image: openlmis/cce:${OL_CCE_VERSION}
    env_file: settings.env
    environment:
      JAVA_OPTS: '-server -Xmx512m -Dspring.datasource.hikari.maximum-pool-size=5 -Dlogging.config=/config/log/logback.xml'
      spring_profiles_active: ${spring_profiles_active}
    volumes:
      - 'service-config:/config'
    depends_on: [log]
    command: ["/wait-for-postgres.sh", "/run.sh"]


  stockmanagement:
    restart: always
    image: openlmis/stockmanagement:${OL_STOCKMANAGEMENT_VERSION}
    env_file: settings.env
    environment:
      JAVA_OPTS: '-server -Xmx512m -Dspring.datasource.hikari.maximum-pool-size=5 -Dlogging.config=/config/log/logback.xml -Dflyway.locations=classpath:db/migration,filesystem:/demo-data'
      spring_profiles_active: ${spring_profiles_active}
    volumes:
      - 'service-config:/config'
    depends_on: [log]
    command: ["/wait-for-postgres.sh", "/run.sh"]

  report:
    restart: always
    image: openlmis/report:${OL_REPORT_VERSION}
    env_file: settings.env
    environment:
      JAVA_OPTS: '-server -Xmx512m -Dspring.datasource.hikari.maximum-pool-size=5 -Dlogging.config=/config/log/logback.xml -Dflyway.locations=classpath:db/migration,filesystem:/demo-data'
      spring_profiles_active: ${spring_profiles_active}
    volumes:
      - 'service-config:/config'
    depends_on: [log]
    command: ["/wait-for-postgres.sh", "/run.sh"]

  diagnostics:
    restart: always
    image: openlmis/diagnostics:${OL_DIAGNOSTICS_VERSION}
    env_file: settings.env
    environment:
      JAVA_OPTS: '-server -Xmx512m -Dspring.datasource.hikari.maximum-pool-size=5 -Dlogging.config=/config/log/logback.xml'
      spring_profiles_active: ${spring_profiles_active}
    volumes:
      - 'service-config:/config'
    depends_on: [log]

  db:
    restart: always
    image: openlmis/postgres:${OL_POSTGRES_VERSION}
    env_file: settings.env
    volumes:
      - pg-data:/var/lib/postgresql
    ports:
      - 5432:5432
    networks:
      default:
        aliases:
          - olmis-db
    depends_on: [consul]

  log:
    restart: always
    image: openlmis/rsyslog:${OL_RSYSLOG_VERSION}
    volumes:
      - 'syslog:/var/log'
    depends_on:
      - service-configuration
      - consul

  service-configuration:
    build:
      context: config
    volumes:
      - service-config:/config

  ftp:
    image: hauptmedia/proftpd
    ports:
      - "21:21"
      - "20:20"
    env_file: settings.env
    depends_on: [consul]

  redis:
    image: redis:3.2.12
    depends_on: [consul]

volumes:
  syslog:
    external: false
  nginx-log:
    external: false
  auth-tomcat-log:
    external: false
  consul-template-log:
    external: false
  service-config:
    external: false
  pg-data:
    external: true

networks:
  default:
    external: false